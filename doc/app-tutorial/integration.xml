<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE chapter [
	<!ENTITY % extensions SYSTEM "../stylesheets/macros.ent" >
	<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
	<!ENTITY % entities SYSTEM "../stylesheets/macros-en.ent" >
	%extensions;
	%DocBookDTD;
	%entities;
]>
<chapter id="integration">
	<title>Integration with UCS</title>
	<para>
		Univention Corporate Server (UCS) is not just an enterprise Linux distribution. With its focus
		on identity and infrastructure management it has a lot of information saved about the IT
		infrastructure environment, the user accounts and the groups and the system configuration, to name a
		few.
	</para>

	<para>
		The most obvious integration makes use of the numerous user accounts stored in the UCS directory service. Apps using this information avoid double effort in user administration. They may technically make just a simple LDAP bind for user authentication. Or if the app needs certain user attributes in its own persistence layer (e.g. the database) they may be synchronized via the Listener-/Notifier mechanism.
		Furthermore, existing data can be extended with app specific attributes, e.g., shall a user be allowed to use the app or what role shall the user occupy for the app. The UCS management system can be extended by attributes and the information is usually stored in the directory service. It is even possible that certain values or their change may trigger certain actions.
		A third integration possibility is to hook up the app in existing solution stacks of UCS, for example the mail stack or the web server. The app will among others benefit from a working configuration and a higher communication security because of already present security certificates.
	</para>

	<para>
		Those are just a few examples to outline the possibilities for the integration. There are many
		more. The guiding question for the integration should be: What information about the infrastructure,
		the configuration and identities does UCS offer that the app will benefit from and saves efforts for
		the administrator?
	</para>

	<para>
		The following sections give an impression of several integration scenarios. Further
		information can be found in the <ulink
		url="https://docs.software-univention.de/developer-reference.html">UCS developer reference</ulink>.
	</para>
	<section id="integration:ldap">
		<title>Read information from the directory service</title>

		<para>
			One primary element of the UCS management system is an LDAP directory in which the data
			required across the domain for the administration are stored. In addition to the user accounts and
			similar elements, the data basis of services such as DHCP is also saved there.
		</para>

		<para>
			An LDAP directory has a tree-like structure, the root of which forms the so-called basis of
			the UCS domain. The UCS domain forms the common security and trust context for its members. An
			account in the LDAP directory establishes the membership in the UCS domain for users. Computers
			receive a computer account when they join the domain.
		</para>

		<para>
			UCS utilizes OpenLDAP as a directory service server. The directory is provided by the master
			domain controller and replicated on all domain controllers (DCs) in the domain. The complete LDAP
			directory is also replicated on a DC backup as this can replace the DC master in an emergency. In
			contrast, the replication on DC slaves can be restricted to certain areas of the LDAP directory
			using ACLs (access control lists) in order to realize a selective replication.
		</para>

		<para>
			The OpenLDAP server of UCS listens on port 7389 by default, not on 389. This is due to Samba 4
			requiring port 389.
		</para>

		<para>
			More information about the OpenLDAP server in UCS can be found <ulink
			url="https://docs.software-univention.de/manual.html#domain:ldap">in the manual</ulink>.
		</para>

		<section id="integration:ldap:access">
			<title>Access the LDAP directory</title>

		<para>
			Sometimes software can use LDAP, but does not use the user accounts directly but is
			restricted to one specific user who then is used for further user authentication. This LDAP bind can
			be done by creating a app specific user in UDM. This should be done in a Join script via
		</para>

		<programlisting language="sh">
ldap_base="$(ucr get ldap/base)"
APP='myapp'
PASSWORD='secret'
touch "/etc/$APP.secret"
chown root:root "/etc/$APP.secret" # or so
chmod 600 "/etc/$APP.secret"
printf '%s' "$PASSWORD" > "/etc/$APP.secret"
udm users/ldap create "$@" --position "cn=users,$ldap_base" \
	--set username="$APP-user" --set lastname="$APP-user" \
	--set password="$PASSWORD" || die
		</programlisting>

		<para>
			Now you can configure your software accordingly. Here the DN will be
			<uri>uid=<replaceable>$APP-user</replaceable>,cn=users,$ldap_base</uri>.
		</para>

		<para>
			If more access is needed, it is also possible to use the machine account of the UCS system.
			Every computer joined into the UCS domain has certain permissions. Computers in
			<uri>cn=dc,cn=computers,$ldap_base</uri> (by default DC Master, DC Backup, DC Slave) can even access the
			(hashed) password attributes of users and computers. The password for the machine account is stored in
			<filename>/etc/machine.secret</filename> (readable by <systemitem class="username">root</systemitem>). The machine DN can be found by
		</para>

		<programlisting language="sh">
ucr get ldap/hostdn
		</programlisting>

		<para>
			The machine password rotates. This means the password changes over time. If your software
			needs to adapt, you may install a script (with executable bit set!) at
			<filename>/usr/lib/univention-server/server_password_change.d/<replaceable>xx$app</replaceable></filename>
			with <replaceable>xx</replaceable> being two digits for ordering purposes
			with something like the following content:
		</para>

		<programlisting language="sh">
#!/bin/sh
case "$1" in
prechange)
	# nothing to do before the password is changed
	exit 0
	;;
nochange)
	# nothing to do after a failed password change
	exit 0
	;;
postchange)
	# do something with /etc/machine.secret, e.g.
	cp /etc/machine.secret /etc/$app.secret
	# restart daemon after password was changed
	invoke-rc.d $app restart
	;;
esac
		</programlisting>
		</section>

		<section id="integration:ldap:listener">
			<title>Listener-/Notifier Mechanism</title>

			<para>
				The data regarding identity and infrastructure management is saved in LDAP. Apps that are
				not LDAP-aware can use this data nonetheless by registering handlers that trigger when certain data
				is changed (e.g. a user is created, the IP of a computer is changed). This may be useful if
			</para>

			<orderedlist>
				<listitem><simpara>
					Your software contains some kind of user authentication/authorization, but cannot connect to LDAP
				</simpara></listitem>
				<listitem><simpara>
					Your software has its own database and the data should be in sync
				</simpara></listitem>
				<listitem><simpara>
					Your software needs to reconfigure as soon as certain parameters of the network topology change
				</simpara></listitem>
			</orderedlist>

			<para>
				More details can be found in the <ulink
				url="https://docs.software-univention.de/developer-reference.html#chap:listener">Developer Reference</ulink>.
			</para>

			<para>
				A short example how to sync first name, last name, email of a user to a (theoretical)
				third-party database. This script is run every time a user is added, removed or any of these
				attributes change. As the email is unique (forced by UCS) and all three attributes are only
				single-valued (also forced by UCS), this may come down to:
			</para>

			<programlisting  language="python">
name = "app_sync_users"
description = "always be in sync with UCS users"
filter = "(&amp;(uid=*)(!(uid=*$))"
attributes = ["givenName", "sn", "mailPrimaryAddress"]

def handler(dn, new, old):
	if new and not old:
		add_user(new)
	elif not new and old:
		remove_user(old)
	elif new and old:
		modify_user(new, old)

def add_user(new):
	new_mailPrimaryAddress = new.get('mailPrimaryAddress', [''])[0]
	new_givenName = new.get('givenName', [''])[0]
	new_sn = new.get('sn', [''])[0]
	get_db_connection().add(new_givenName, new_sn, new_mailPrimaryAddress)

def remove_user(old):
	old_mailPrimaryAddress = old.get('mailPrimaryAddress', [''])[0]
	get_db_connection().remove(old_mailPrimaryAddress)

def modify_user(new, old):
	old_mailPrimaryAddress = old.get('mailPrimaryAddress', [''])[0]
	new_mailPrimaryAddress = new.get('mailPrimaryAddress', [''])[0]
	new_givenName = new.get('givenName', [''])[0]
	new_sn = new.get('sn', [''])[0]
	get_db_connection().modify(old_mailPrimaryAddress, new_givenName,
		new_sn, new_mailPrimaryAddress)

def get_db_connection():
	raise NotImplementedError()
			</programlisting>

		</section>
	</section>

	<section id="integration:ucr">
		<title>Read configuration database</title>

		<para>
			UCS ships with a key-value store used to save parameters of the environment, the Univention
			Configuration Registry (UCR). It holds information about the local host (like hostname or network settings)
			and to some extent about the domain configuration (like the domain name or where the DC Master can be
			found). More details can be found in the <ulink
			url="https://docs.software-univention.de/developer-reference.html#chap:ucr">Developer Reference</ulink>.
		</para>

		<para>
			The values can be accessed easily in a script by using
		</para>

		<programlisting language="sh">
hostname=$(ucr get hostname)
		</programlisting>

		<para>
			Notable variables include:
		</para>

		<itemizedlist>
			<listitem><simpara>
					<envar>hostname</envar>
			</simpara></listitem>
			<listitem><simpara>
					<envar>domainname</envar>
			</simpara></listitem>
			<listitem><simpara>
					<envar>ldap/base</envar>
			</simpara></listitem>
			<listitem><simpara>
					<envar>ldap/master</envar> (FQDN of the DC Master)
			</simpara></listitem>
			<listitem><simpara>
					<envar>ldap/master/port</envar> (Port for LDAP bind)
			</simpara></listitem>
			<listitem><simpara>
					<envar>ldap/hostdn</envar> (May be useful to connect to LDAP with the machine account (password in <filename>/etc/machine.secret</filename>))
			</simpara></listitem>
		</itemizedlist>

		<para>
			You can use the database to store your own keys and values and use those in your script:
		</para>

		<programlisting language="sh">
ucr set myapp/loglevel=5
		</programlisting>

		<para>
			It is also possible to set the variable only if it was not set before. This is generally
			preferred as it allows users to overwrite those values without having to fear that it is overwritten
			again.
		</para>

		<programlisting language="sh">
ucr set myapp/loglevel?4
		</programlisting>

		<para>
			You do not need to register those variables anywhere, they are just saved. It is also
			possible to use theses variables in your installations scripts as environment variables, for
			example:
		</para>

		<programlisting language="sh">
eval "$(ucr shell)"
echo "This UCS system has the FQDN $hostname.$domainname "\
"and the LDAP base is $ldap_base."
		</programlisting>

		<para>
			A very powerful ability of UCR is its usage in templates. You may ship files that are
			recreated when certain variables change. For example, your app's configuration file needs to be
			updated every time a locale of the system is added or removed. Say your main package (<package>myapp.deb</package>)
			ships <filename>/etc/myapp.conf</filename>:
		</para>

		<programlisting language="sh">
# configuration of myapp
title=My App
locales=en_US.UTF-8:UTF-8
		</programlisting>

		<para>
			Your integration package (<package>univention-myapp.deb</package>) can ship this file, too:
		</para>

		<programlisting language="sh">
@%@UCRWARNING=#@%@
# configuration of myapp
title=My App
locales=@%@locale@%@
		</programlisting>

		<para>
			This file shall trigger each time
		</para>

		<programlisting language="sh">
ucr set locale=...
		</programlisting>

		<para>
			is called.
		</para>

		<para>
			You need to add the file above in <package>univention-myapp</package>'s directory at <filename>conffiles/etc/myapp.conf</filename>.
			Furthermore you need to add the following in <filename>debian/rules</filename>:
		</para>

		<programlisting language="make">
override_dh_auto_install:
	univention-install-config-registry
	dh_auto_install

%:
	dh $@
		</programlisting>

		<para>
			Now you need to tell the system when to recreate it. For this, create a file
			<filename>debian/univention-myapp.univention-config-registry</filename> with
		</para>

		<programlisting language="sh">
Type: file
File: etc/myapp.conf
Variables: locale
		</programlisting>

		<para>
			And this should do the trick. Templates can even use a Python runtime to do more than just
			writing the exact content of certain UCR variables. See the Developer Reference for details.
		</para>
	</section>

	<section id="integration:join">
		<title>Domain-Join and Unjoin</title>

		<para>
			Integration into the UCS domain works by writing into the domain wide LDAP directory. The package
			can only change something in the LDAP directory through a join script, otherwise the functionality is
			not guaranteed. Furthermore, the hostname and other basic configuration settings are first defined
			when the join script is executed.
		</para>

		<para>
			A join script is just an executable script living in <filename class="directory">/usr/lib/univention-install/</filename>. The name is
			something like <filename><replaceable>xx$app</replaceable>.inst</filename> (<replaceable>xx</replaceable> are two digits for ordering purposes).
			The file must have the executable permission bits set.
		</para>

		<para>
			Join scripts are commonly used to (but of course not limited to):
		</para>

		<itemizedlist>
			<listitem><simpara>
    		Create users, groups, etc, as well as modifying existing ones
			</simpara></listitem>
			<listitem><simpara>
    		Registering an LDAP schema extension
			</simpara></listitem>
			<listitem><simpara>
    		Extending the form for creating/modifying a user (or a computer, ...) by Extended Attributes
			</simpara></listitem>
			<listitem><simpara>
    		Adding a service entry to the local host
			</simpara></listitem>
			<listitem><simpara>
    		Configuring the app with parameters read from LDAP
			</simpara></listitem>
		</itemizedlist>

		<para>
			Join scripts are normally run as <systemitem class="username">root</systemitem>.
		</para>

		<para>
			This example shows how to register a schema extension as well as adding widgets to the user
			form.
		</para>

		<programlisting language="sh">
root@master:~# cat /usr/lib/univention-install/50app.inst
#!/bin/bash

# VERSION has to be set for external programs to parse
# join scripts will in general onyl be run once per VERSION
# so you need to increment this value when you are changing the script
VERSION="1"

. /usr/share/univention-lib/ldap.sh
. /usr/share/univention-join/joinscripthelper.lib

# this function of joinscripthelper.lib initializes some important
# variables as well as aborting if this script has already been run
joinscript_init

eval "$(ucr shell)"
SERVICE="My App"
APP="app"

# "$@" is IMPORTANT, because this includes parameters for LDAP bind
# Otherwise these functions will fail on systems != DC master
# An example schema file is in the section "Extend the UCS management
# system"
ucs_registerLDAPExtension "$@" --schema "/usr/share/$APP/$APP.schema"

# create a container where the extended attributes shall live
udm container/cn create "$@" \
	--ignore_exists \
	--position "cn=custom attributes,cn=univention,$ldap_base" \
	--set name="$APP" || die # if this fails, abort join script

# for more details, see the section "Extend the UCS management system"
udm settings/extended_attribute create "$@" \
	--ignore_exists \
	--position "cn=$APP,cn=custom attributes,cn=univention,$ldap_base" \
	--set module="users/user" \
	`# ...` \
	--set name="$APP-enabled" || die

# Best practice: Adds the service to the host. Then LDAP can be queried
# to lookup where the app is already installed. Also useful for unjoin
ucs_addServiceToLocalhost "${SERVICE}" "$@"

# when everything worked fine, tell the system that this VERSION does
# not need to be run again
joinscript_save_current_version
exit 0
		</programlisting>

		<para>
			An unjoin script is more or less the same, except that it lives in <filename class="directory">/usr/lib/univention-uninstall/</filename>
			(and ends with <filename class="extension">.uinst</filename>). Its purpose is to be called after the app is uninstalled. After
			uninstallation, it might be appropriate to clean up those objects that have been added in the join
			script. Keep in mind that the app may be installed on different servers in the domain. So one must
			take care to not delete important objects when another host is still running this service.
		</para>

		<programlisting language="sh">
root@master:~# cat /usr/lib/univention-uninstall/50app-uninstall.uinst
#!/bin/bash
VERSION=1
. /usr/share/univention-lib/ldap.sh
. /usr/share/univention-join/joinscripthelper.lib
joinscript_init

eval "$(ucr shell)"
SERVICE="My App"
APP="app"

# revert ucs_addServiceToLocalhost
ucs_removeServiceFromLocalhost "${SERVICE}" "$@"

# check whether this app is still installed elsewhere
if ucs_isServiceUnused "${SERVICE}" "$@"; then
	# revert other changes made by 50app.inst
	# just remove the container, the extended attribute is removed
	# automatically
	udm container/cn remove --dn \
		"cn=$APP,cn=custom attributes,cn=univention,$ldap_base"

	# DO NOT revert ucs_registerLDAPExtension "$@" --schema
	# schema extensions should be kept forever. If attributes defined
	# there were set during the time the app was installed
	# it may break LDAP if the attribute definition gets removed!
	# See http://sdb.univention.de/1274
fi

# revert joinscript_save_current_version - so that the join script
# would run again if the app is reinstalled
joinscript_remove_script_from_status_file app

exit 0
		</programlisting>

		<para>
			Now the scripts need to be packaged. Some steps have to be done in the <filename class="extension">postinst</filename>, <filename class="extension">prerm</filename>, <filename class="extension">postrm</filename> files
			of the package. There is a helper script that does that automatically. In <filename>debian/rules</filename>, add
		</para>

		<programlisting language="make">
override_dh_auto_install:
	univention-install-joinscript
	dh_auto_install

%:
	dh $@
		</programlisting>

		<para>
			The join script needs to lie in the root directory of the source code and has to be named
			after the package, e.g. <filename>50univention-myapp.inst</filename> and <filename>50univention-myapp-uninstall.uinst</filename>. If you need
			more control, just do not <command>univention-install-joinscript</command>, details what to do can be found in the
			<ulink url="https://docs.software-univention.de/developer-reference.html#join:write">Developer
			Reference</ulink>.
		</para>
	</section>

	<section id="integration:udm">
		<title>Extend the UCS management system</title>
		<section id="integration:udm:ea">
			<title>Add tabs and options</title>

			<para>
				The form for creating LDAP objects can be customized by apps. Technically this is done by writing
				special objects into LDAP. As such, customization is generally done in a join script. The objects
				are created with the Univention Directory Manager (UDM).
			</para>

			<para>
				This example creates a checkbox in the users' form's tab "Advanced settings". This makes it possible
				to save whether the user should be allowed to use the app. The value has to be queried by the app
				afterwards.
			</para>

			<programlisting language="sh">
APP="myapp"
SERVICE="My App"
# for more details, see
#   https://docs.software-univention.de/developer-reference.html#udm:ea
# "$@" is here because this should go into a join script and there
# passing the arguments of the script invocation to udm is necessary
udm settings/extended_attribute create "$@" \
	--ignore_exists \
	--position "cn=$APP,cn=custom attributes,cn=univention,$ldap_base" \
	--set module="users/user" `# extending users` \
	--set ldapMapping="${APP}Enabled" `# LDAP attribute from the schema` \
	--set objectClass="${APP}-user" \
	--set name="$APP-enabled" `# this is the name for UDM` \
	--set shortDescription="Allow $SERVICE" \
	--set longDescription="Whether this user shall be allowed ..." \
	--set translationShortDescription="\"de_DE\" \"$SERVICE erlauben\"" \
	--set translationLongDescription="\"de_DE\" \"Zeigt an, ob ...\"" \
	--set tabName="$SERVICE" `# This may create a new tab in the form` \
	--set translationTabName="\"de_DE\" \"$SERVICE\"" \
	--set tabAdvanced='0' \
	--set tabPosition='1' \
	--set syntax='TrueFalseUp' `# should be a CheckBox` \
	--set mayChange='1' \
	--set default='TRUE' || die
			</programlisting>

			<para>
				Note the
				<programlisting language="sh">
--set syntax='TrueFalseUp'
				</programlisting>
				which semantically turns this attribute into a boolean field. Other syntax definitions exist, for example <classname>string</classname> or <classname>ipAddress</classname>. More examples can be found in
				the following file <filename>/usr/share/pyshared/univention/admin/syntax.py</filename>.
			</para>

			<para>
				It is also possible to create own drop downs. The following example adds a combo box with two options
				"<literal>Admin</literal>" or "<literal>User</literal>"
			</para>

			<programlisting language="sh">
udm settings/extended_attribute create "$@" \
	--ignore_exists \
	--position "cn=$APP,cn=custom attributes,cn=univention,$ldap_base" \
	--set module="users/user" \
	--set ldapMapping="${APP}Role" \
	--set objectClass="${APP}-user" \
	--set name="$APP-role" \
	--set shortDescription="Role in $SERVICE" \
	--set longDescription="Which role the user has for $SERVICE" \
	--set translationShortDescription="\"de_DE\" \"$SERVICE-Rolle\"" \
	--set translationLongDescription="\"de_DE\" \"Welche Rolle ...\"" \
	--set tabName="$SERVICE" \
	--set translationTabName="\"de_DE\" \"$SERVICE\"" \
	--set tabAdvanced='1' \
	--set tabPosition='1' \
	--set syntax="${APP}UserOrAdmin" \
	--set mayChange='1' \
	--set default='user' || die
			</programlisting>

			<para>
				The syntax is a Python class and needs to be defined in a separate file:
			</para>

			<programlisting language="python">
class myappUserOrAdmin(select):
	choices=[('user', 'User'), ('admin', 'Admin')]
			</programlisting>

			<para>
				This file needs to be registered in a join script:
			</para>

			<programlisting language="sh">
ucs_registerLDAPExtension "$@" \
	--udm_syntax "/usr/share/$APP/${APP}_syntax.py"
			</programlisting>

		</section>

		<section id="integration:ldap:schema">
			<title>LDAP schema extension</title>

			<para>
				The Extended Attributes are generally stored in LDAP as attributes not defined by default. A schema
				file needs to be created and registered for the Extended Attributes to actually work. See <ulink url="http://www.openldap.org/doc/admin23/schema.html">this section</ulink> for
				details of how to write a schema file.
			</para>

			<para>
				The example above needs a file like this:
			</para>

			<programlisting language="schema">
attributetype ( 1.3.6.1.4.1.10176.99998.xxx.1.1 NAME 'myapp-enabled'
	DESC 'My App allowed'
	EQUALITY caseIgnoreMatch
	SUBSTR caseIgnoreSubstringsMatch
	SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE
	)
attributetype ( 1.3.6.1.4.1.10176.99998.xxx.1.2 NAME 'myapp-role'
	DESC 'My App role'
	EQUALITY caseIgnoreMatch
	SUBSTR caseIgnoreSubstringsMatch
	SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE
	)
objectclass ( 1.3.6.1.4.1.10176.99998.xxx.0.1 NAME 'myapp-user'
	DESC 'My App user'
	SUP top AUXILIARY
	MUST ( cn )
	MAY ( myapp-enabled $ myapp-role )
	)
			</programlisting>

			<para>
				Note the "<replaceable>xxx</replaceable>" in the so called OIDs. You need a unique (worldwide!) identifier for your attributes
				and object classes. Either <ulink url="http://pen.iana.org/pen/PenApplication.page">request
				one</ulink> or (probably better) talk to us, as Univention has its own
				namespace and any schema extension can be defined "beneath" it.
			</para>

			<para>
				This file needs to be registered in a join script:
			</para>

			<programlisting language="sh">
ucs_registerLDAPExtension "$@" --schema "/usr/share/$APP/$APP.schema"
			</programlisting>

		</section>

		<section id="integration:udm:module">
			<title>Build own UDM modules</title>

			<para>
				The Univention Directory Manager (UDM) is a collection of modules written in Python to add powerful capabilities around Python's LDAP bindings. In general, vendors will extend those existing modules using Extended Attributes. But if a completely new class of object shall be saved, a new UDM module may be useful, e.g., if the app manages buildings which cannot be simply "extended groups or containers".
			</para>

			<para>
				When writing a UDM module, it is best to look out for existing modules that can be copied and
				customized for one's own needs. They live in <filename class="directory">/usr/share/pyshared/univention/admin/handlers/</filename>. The
				module <filename>appcenter/app.py</filename> is a rather simple module which shows how a basic module should look like:
			</para>

			<programlisting language="sh">
svn co &websvn;\
management/univention-management-console-module-appcenter/\
udm/handlers/appcenter/
			</programlisting>

		</section>

		<section id="integration:umc:module">
			<title>Build own UMC module </title>

			<para>
				The Univention Management Console (UMC) is the web based frontend which is used to administrate the UCS domain. It consists of separate modules and vendors may write such modules to further extend the Console. This may be a good idea if
			</para>

			<itemizedlist>
				<listitem><simpara>
					The app can be customized but currently lacks a frontend
				</simpara></listitem>
				<listitem><simpara>
					The app needs to be activated or manually configured to work properly
				</simpara></listitem>
			</itemizedlist>

			<para>
				Note that many UCS users are used to UMC and the fact that everything can be configured in one
				place. So adding a UMC module may greatly enhance the user experience.
			</para>

			<para>
				UMC modules are very versatile (both the JavaScript based frontend part as well as the Python
				backend part) and can be used for nearly anything. This guide cannot cover everything there is about
				UMC modules. One starting point may be
			</para>

			<programlisting language="sh">
univention-install univention-management-console-dev
umc-create-module --help
			</programlisting>

			<para>
				Or you use UMC and look out for modules that to some extend do what you are trying to
				accomplish and copy the source code, e.g.
			</para>

				<programlisting language="sh">
svn co &websvn;\
/management/univention-management-console-module-top
				</programlisting>
		</section>
	</section>

	<section id="integration:scenarios">
		<title>Further integration scenarios</title>
		<section id="integration:scenarios:firewall">
			<title>Firewall settings</title>

			<para>
				In the default setting, all incoming ports are blocked by the UCS firewall. Every package
				can provide rules, which free up the ports required. In this example the port 6644 is opened for TCP
				and UDP. It can be run in the <filename class="extension">postinst</filename> script or in the join script:
			</para>

			<programlisting language="sh">
# configure firewall
univention-config-registry set \
	security/packetfilter/package/"$APP"/tcp/6644/all="ACCEPT" \
	security/packetfilter/package/"$APP"/tcp/6644/all/en="$APP" \
	security/packetfilter/package/"$APP"/udp/6644/all="ACCEPT" \
	security/packetfilter/package/"$APP"/udp/6644/all/en="$APP"
[ -x "/etc/init.d/univention-firewall" ] &amp;&amp;
	invoke-rc.d univention-firewall restart
			</programlisting>
		</section>

		<section id="integration:scenarios:apache">
			<title>Serving a web application</title>

			<para>
				UCS comes with a running Apache HTTP Server used by the UMC server as a proxy. This means that apps
				cannot use port 80/443 easily: It is already used. Apps can use Apache, though, by shipping a file
				<filename>/etc/apache2/sites-available/<replaceable>$APP</replaceable></filename>. Apache can then act as a proxy to the app's server (running on a
				different port).
			</para>

			<programlisting language="sh">
# minimal
ProxyPass /$APP/ http://127.0.0.1:$APP_PORT/
ProxyPassReverse /$APP/ http://127.0.0.1:$APP_PORT/
			</programlisting>

			<para>
				The site needs to be enabled by a line in the <filename class="extension">postinst</filename> of the package:
			</para>

			<programlisting language="sh">
a2ensite "$APP"
			</programlisting>

			<para>
				It is highly recommended to use Apache for it is the service with port 80/443. While it is
				possible to just let the app respond to requests on port say, 8080, many firewalls will block the
				app without taking further actions. One prominent example are the default security rules of the
				Amazon Web Services. The app may not be accessible without using Apache as a proxy!
			</para>
		</section>

		<section id="integration:scenarios:overview">
			<title>Setting links to the web interface in <uri>/ucs-overview</uri></title>

			<para>
				The start page of any UCS system (<uri>http://<replaceable>$hostname</replaceable>/</uri>) lists available services on this
				server, notably UMC. If an app provides a web interface, this can be listed, too. The easiest way is
				by stating this in the <filename class="extension">ini</filename> file:
			</para>

			<programlisting language="sh">
WebInterface=/$APP/
#WebInterfaceName=... # defaults to Name=
# one of the two categories in /ucs-overview.
#   "services" (default) or "admin"
#UCSOverviewCategory=services
			</programlisting>

			<para>
				If <property>WebInterface</property> is given in the <filename class="extension">ini</filename>, the App Center takes care of the integration on the
				overview site. But sometimes this is not powerful enough. This level of "automated integration"
				cannot handle ports other than 80/443 (as it will always use the current port which is 80 or 443)
				and cannot add more than one link. If a deeper level is required, this should be done in the
				<filename class="extension">postinst</filename> and <filename class="extension">postrm</filename> scripts of the integration package using UCR:
			</para>

	<programlisting language="sh">
# postinst

#DEBHELPER#

# ucs/web/overview/entries/service/... or
# ucs/web/overview/entries/admin/...

export P="ucs/web/overview/entries/service"
ucr set \
	"$P/$APP"/description/de="Description of link to $APP (German)" \
	"$P/$APP"/description="Description of link to $APP (English)" \
	"$P/$APP"/icon="/url/to/icon/$APP.png" \
	"$P/$APP"/label/de="Headline of link to $APP (German)" \
	"$P/$APP"/label="Headline of link to $APP (English)" \
	"$P/$APP"/link="https://$hostname.$domainname:$APP_PORT/webinterface/" \
	"$P/$APP"/priority=xx-digits-for-sorting-or-just-dont-set
	</programlisting>

	<programlisting language="sh">
# postrm

#DEBHELPER#

ucr unset \
	ucs/web/overview/entries/service/"$APP"/description/de \
	ucs/web/overview/entries/service/"$APP"/description \
	ucs/web/overview/entries/service/"$APP"/icon \
	ucs/web/overview/entries/service/"$APP"/label/de \
	ucs/web/overview/entries/service/"$APP"/label \
	ucs/web/overview/entries/service/"$APP"/link \
	ucs/web/overview/entries/service/"$APP"/priority
	</programlisting>

		</section>

		<section id="integration:scenarios:db">
			<title>Using PostgreSQL or MySQL</title>

			<para>
				When your application uses PostgreSQL, your package should depend on <package>univention-postgres</package> and
				you need to ship a file in <filename class="directory">/etc/postgresql/9.1/main/pg_hba.conf.d/</filename> or, maybe even better, in
				<filename class="directory">/etc/univention/templates/files/etc/postgresql/9.1/main/pg_hba.conf.d/</filename> (see UCR):
			</para>

				<programlisting>
local $app_db_name $app_db_user md5
				</programlisting>

			<para>
				When your application uses MySQL, you may access the administrator password by reading
				<filename>/etc/mysql.secret</filename>. A dependency on the package <package>mysql-server</package> is enough as we patch the Debian package.
			</para>
		</section>

	</section>

</chapter>

<!-- vim:set ts=2 sw=2 tw=100 noet ft=docbk:-->
