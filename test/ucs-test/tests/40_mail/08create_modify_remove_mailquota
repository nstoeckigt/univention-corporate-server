#!/usr/share/ucs-test/runner python
## desc: Create modify remove mailquota (cyrus specific)
## tags: [apptest]
## exposure: dangerous
## packages:
##  - univention-mail-server
##  - univention-mail-cyrus
##  - univention-directory-manager-tools
## bugs: [23527]


from essential.mailclient import MailClient_SSL
import time
import subprocess
from univention.config_registry import handler_set
import univention.testing.strings as uts
import univention.testing.ucr as ucr_test
import univention.testing.udm as udm_test
import univention.testing.utils as utils


def enable_mailquota_set_interval(interval):
	handler_set(['mail/cyrus/imap/quota=yes', 'mail/cyrus/imap/quotainterval=%s' % interval])


def restart_cyrus_saslauthd():
	for cmd in [['/etc/init.d/cyrus-imapd', 'restart'], ['/etc/init.d/saslauthd', 'restart']]:
		subprocess.call(cmd, stderr=open('/dev/null', 'w'))


def main():
	with udm_test.UCSTestUDM() as udm:
		try:
			with ucr_test.UCSTestConfigRegistry() as ucr:
				domain = ucr.get('domainname')
				hostname = ucr.get('hostname')
				UDM_policies_mailquota_name = uts.random_name()
				mailquota_dn = udm.create_object(
					modulename='policies/mailquota',
					name=UDM_policies_mailquota_name,
					MailQuota=17,
					position='cn=mail,cn=policies,%s' % ucr.get('ldap/base')
				)
				policy = 'cn=%s,cn=mail,cn=policies,%s' % (UDM_policies_mailquota_name, ucr.get('ldap/base'))
				mail = '%s@%s' % (uts.random_name(), domain)
				userdn, username = udm.create_user(
					password='univention',
					policy_reference=policy,
					mailHomeServer='%s.%s' % (hostname, domain),
					mailPrimaryAddress=mail,
				)

				enable_mailquota_set_interval(1)
				restart_cyrus_saslauthd()

				imap = MailClient_SSL('%s.%s' % (hostname, domain))
				imap.log_in(mail, 'univention')
				response, quota = imap.get_quota_root('INBOX')
				if not response == 'OK':
					utils.fail('Fail get imap quota')
				if not quota == '17000':
					utils.fail('Wrong quota set = %r' % quota)

				imap = MailClient_SSL('%s.%s' % (hostname, domain))
				imap.log_in(mail, 'univention')
				response, quota = imap.get_quota_root('INBOX')
				if not response == 'OK':
					utils.fail('Fail get imap quota')
				if not quota == '17000':
					utils.fail('Wrong quota set = %r' % quota)

				udm.modify_object(
					modulename='policies/mailquota',
					dn=mailquota_dn,
					MailQuota=42,
				)

				restart_cyrus_saslauthd()
				time.sleep(60)

				imap = MailClient_SSL('%s.%s' % (hostname, domain))
				imap.log_in(mail, 'univention')
				response, quota = imap.get_quota_root('INBOX')
				imap.logout()
				if not response == 'OK':
					utils.fail('Failed to get imap quota')
				if not quota == '42000':
					utils.fail('Wrong quota set = %r, correct = 42000' % quota)

				imap = MailClient_SSL('%s.%s' % (hostname, domain))
				imap.log_in(mail, 'univention')
				response, quota = imap.get_quota_root('INBOX')
				imap.logout()
				if not response == 'OK':
					utils.fail('Failed to get imap quota')
				if not quota == '42000':
					utils.fail('Wrong quota set = %r, correct = 42000' % quota)

				udm.modify_object(
					modulename='users/user',
					dn=userdn,
					policy_dereference=policy
				)
				udm.remove_object(
					modulename='policies/mailquota',
					dn=mailquota_dn
				)
				restart_cyrus_saslauthd()
				time.sleep(60)

				imap = MailClient_SSL('%s.%s' % (hostname, domain))
				imap.log_in(mail, 'univention')
				response, quota = imap.get_quota_root('INBOX')
				imap.logout()
				if not response == 'OK':
					utils.fail('Failed to get imap quota')
				if not quota == '(':
					utils.fail('Wrong quota set = %r, although it should not be set' % quota)

				imap = MailClient_SSL('%s.%s' % (hostname, domain))
				imap.log_in(mail, 'univention')
				response, quota = imap.get_quota_root('INBOX')
				imap.logout()
				if not response == 'OK':
					utils.fail('Failed to get imap quota')
				if not quota == '(':
					utils.fail('Wrong quota set = %r, although it should not be set' % quota)
		finally:
			restart_cyrus_saslauthd()


if __name__ == '__main__':
	main()

# vim: set ft=python ts=4 sw=4 noet ai :
